{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELLS\\\\OneDrive\\\\Desktop\\\\chat\\\\src\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Dash.css\";\nimport { database } from \"./firebase\"; // Assuming your Firebase initialization is done in \"./firebase\"\nimport { push, ref, onValue } from \"firebase/database\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chatRef = ref(database, \"Chat\");\nfunction Dashboard() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const logout = () => {\n    localStorage.clear();\n    window.location.reload();\n  };\n  const handleSendMessage = e => {\n    if ((e.key === \"Enter\" || e.type === \"click\") && inputText.trim() !== \"\") {\n      // Push a new message to the \"Chat\" reference\n      push(chatRef, {\n        text: inputText,\n        timestamp: Date.now(),\n        sender: \"Arya\"\n      }).then(() => {\n        setInputText(\"\"); // Clear the input field after sending a message\n      });\n    }\n  };\n\n  // Listen for changes in the \"Chat\" reference\n  useEffect(() => {\n    const unsubscribe = onValue(chatRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        // Convert the object of messages into an array\n        const messageArray = Object.values(data);\n        setMessages(messageArray);\n      }\n    });\n\n    // Cleanup the listener when the component unmounts\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"a1\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"pro.jpg\",\n        alt: \"\",\n        style: {\n          height: \"20vh\",\n          width: \"10vw\",\n          borderRadius: \"100%\",\n          position: \"fixed\",\n          top: \"3%\",\n          left: \"3%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"a2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chat-logout\",\n          onClick: logout,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            style: {\n              color: \"white\",\n              textDecoration: \"none\"\n            },\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-box\",\n          id: \"chatBox\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-box\",\n            children: [message.text, \" - \", message.sender]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-box\",\n          id: \"messageInput\",\n          placeholder: \"Type a message...\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value) // Update inputText when input changes\n          ,\n          onKeyDown: handleSendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chat-input\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"hoi0r9MtRS4dOWkb+HIWMG7rMkY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Link","database","push","ref","onValue","jsxDEV","_jsxDEV","chatRef","Dashboard","_s","inputText","setInputText","messages","setMessages","logout","localStorage","clear","window","location","reload","handleSendMessage","e","key","type","trim","text","timestamp","Date","now","sender","then","unsubscribe","snapshot","data","val","messageArray","Object","values","className","children","id","src","alt","style","height","width","borderRadius","position","top","left","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","color","textDecoration","map","message","index","placeholder","value","onChange","target","onKeyDown","_c","$RefreshReg$"],"sources":["C:/Users/DELLS/OneDrive/Desktop/chat/src/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Dash.css\";\r\nimport { database } from \"./firebase\"; // Assuming your Firebase initialization is done in \"./firebase\"\r\nimport { push, ref, onValue } from \"firebase/database\";\r\n\r\nconst chatRef = ref(database, \"Chat\");\r\n\r\nfunction Dashboard() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const logout = () => {\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if ((e.key === \"Enter\" || e.type === \"click\") && inputText.trim() !== \"\") {\r\n      // Push a new message to the \"Chat\" reference\r\n      push(chatRef, {\r\n        text: inputText,\r\n        timestamp: Date.now(),\r\n        sender: \"Arya\",\r\n      }).then(() => {\r\n        setInputText(\"\"); // Clear the input field after sending a message\r\n      });\r\n    }\r\n  };\r\n\r\n  // Listen for changes in the \"Chat\" reference\r\n  useEffect(() => {\r\n    const unsubscribe = onValue(chatRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        // Convert the object of messages into an array\r\n        const messageArray = Object.values(data);\r\n        setMessages(messageArray);\r\n      }\r\n    });\r\n\r\n    // Cleanup the listener when the component unmounts\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div id=\"a1\">\r\n        <img\r\n          src=\"pro.jpg\"\r\n          alt=\"\"\r\n          style={{\r\n            height: \"20vh\",\r\n            width: \"10vw\",\r\n            borderRadius: \"100%\",\r\n            position: \"fixed\",\r\n            top: \"3%\",\r\n            left: \"3%\",\r\n          }}\r\n        />\r\n        <div id=\"a2\">\r\n          <button className=\"chat-logout\" onClick={logout}>\r\n            <Link to=\"/\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n              Logout\r\n            </Link>\r\n          </button>\r\n          <div className=\"chat-box\" id=\"chatBox\">\r\n            {messages.map((message, index) => (\r\n              <div key={index} className=\"message-box\">\r\n                {message.text} - {message.sender}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-box\"\r\n            id=\"messageInput\"\r\n            placeholder=\"Type a message...\"\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)} // Update inputText when input changes\r\n            onKeyDown={handleSendMessage}\r\n          />\r\n          <button className=\"chat-input\" onClick={handleSendMessage}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}