{"ast":null,"code":"import _slicedToArray from\"C:/Users/DELLS/OneDrive/Desktop/chat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{Link}from\"react-router-dom\";import\"./Dash.css\";import{database}from\"./firebase\";// Assuming your Firebase initialization is done in \"./firebase\"\nimport{push,ref,onValue}from\"firebase/database\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var chatRef=ref(database,\"Chat\");function getRandomColor(){// Generate a random color in hexadecimal format\nreturn\"#\"+Math.floor(Math.random()*16777215).toString(16);}function Dashboard(_ref){var user=_ref.user;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),inputText=_useState2[0],setInputText=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];var logout=function logout(){localStorage.clear();window.location.reload();};var handleSendMessage=function handleSendMessage(e){if((e.key===\"Enter\"||e.type===\"click\")&&inputText.trim()!==\"\"){var userColor=getRandomColor();// Push a new message to the \"Chat\" reference\npush(chatRef,{text:inputText,timestamp:Date.now(),sender:\"Aanchal\",backgroundColor:userColor// Store the user's color with the message\n}).then(function(){setInputText(\"\");// Clear the input field after sending a message\n});}};useEffect(function(){var unsubscribe=onValue(chatRef,function(snapshot){var data=snapshot.val();if(data){// Convert the object of messages into an array\nvar messageArray=Object.values(data);setMessages(messageArray);}});return function(){unsubscribe();};},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"home-container\",children:/*#__PURE__*/_jsxs(\"div\",{id:\"a1\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"pro.jpg\",alt:\"\",style:{height:\"20vh\",width:\"10vw\",borderRadius:\"100%\",position:\"fixed\",top:\"3%\",left:\"3%\"}}),/*#__PURE__*/_jsxs(\"div\",{id:\"a2\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"chat-logout\",onClick:logout,children:/*#__PURE__*/_jsx(Link,{to:\"/\",style:{color:\"white\",textDecoration:\"none\"},children:\"Logout\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-box\",id:\"chatBox\",children:messages.map(function(message,index){return/*#__PURE__*/_jsx(\"div\",{className:\"message-box\",style:{backgroundColor:message.backgroundColor},children:message.text},index);})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"input-box\",id:\"messageInput\",placeholder:\"Type a message...\",value:inputText,onChange:function onChange(e){return setInputText(e.target.value);}// Update inputText when input changes\n,onKeyDown:handleSendMessage}),/*#__PURE__*/_jsx(\"button\",{className:\"chat-input\",onClick:handleSendMessage,children:\"Send\"})]})]})});}export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","Link","database","push","ref","onValue","jsx","_jsx","jsxs","_jsxs","chatRef","getRandomColor","Math","floor","random","toString","Dashboard","_ref","user","_useState","_useState2","_slicedToArray","inputText","setInputText","_useState3","_useState4","messages","setMessages","logout","localStorage","clear","window","location","reload","handleSendMessage","e","key","type","trim","userColor","text","timestamp","Date","now","sender","backgroundColor","then","unsubscribe","snapshot","data","val","messageArray","Object","values","className","children","id","src","alt","style","height","width","borderRadius","position","top","left","onClick","to","color","textDecoration","map","message","index","placeholder","value","onChange","target","onKeyDown"],"sources":["C:/Users/DELLS/OneDrive/Desktop/chat/src/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Dash.css\";\r\nimport { database } from \"./firebase\"; // Assuming your Firebase initialization is done in \"./firebase\"\r\nimport { push, ref, onValue } from \"firebase/database\";\r\n\r\nconst chatRef = ref(database, \"Chat\");\r\n\r\nfunction getRandomColor() {\r\n  // Generate a random color in hexadecimal format\r\n  return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n}\r\n\r\nfunction Dashboard({ user }) {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const logout = () => {\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if ((e.key === \"Enter\" || e.type === \"click\") && inputText.trim() !== \"\") {\r\n      const userColor = getRandomColor();\r\n      // Push a new message to the \"Chat\" reference\r\n      push(chatRef, {\r\n        text: inputText,\r\n        timestamp: Date.now(),\r\n        sender: \"Aanchal\",\r\n        backgroundColor: userColor, // Store the user's color with the message\r\n      }).then(() => {\r\n        setInputText(\"\"); // Clear the input field after sending a message\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onValue(chatRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        // Convert the object of messages into an array\r\n        const messageArray = Object.values(data);\r\n        setMessages(messageArray);\r\n      }\r\n    });\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div id=\"a1\">\r\n        <img\r\n          src=\"pro.jpg\"\r\n          alt=\"\"\r\n          style={{\r\n            height: \"20vh\",\r\n            width: \"10vw\",\r\n            borderRadius: \"100%\",\r\n            position: \"fixed\",\r\n            top: \"3%\",\r\n            left: \"3%\",\r\n          }}\r\n        />\r\n        <div id=\"a2\">\r\n          <button className=\"chat-logout\" onClick={logout}>\r\n            <Link to=\"/\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n              Logout\r\n            </Link>\r\n          </button>\r\n          <div className=\"chat-box\" id=\"chatBox\">\r\n            {messages.map((message, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"message-box\"\r\n                style={{\r\n                  backgroundColor: message.backgroundColor\r\n                }}\r\n              >\r\n                {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-box\"\r\n            id=\"messageInput\"\r\n            placeholder=\"Type a message...\"\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)} // Update inputText when input changes\r\n            onKeyDown={handleSendMessage}\r\n          />\r\n          <button className=\"chat-input\" onClick={handleSendMessage}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"0HAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAO,YAAY,CACnB,OAASC,QAAQ,KAAQ,YAAY,CAAE;AACvC,OAASC,IAAI,CAAEC,GAAG,CAAEC,OAAO,KAAQ,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEvD,GAAM,CAAAC,OAAO,CAAGN,GAAG,CAACF,QAAQ,CAAE,MAAM,CAAC,CAErC,QAAS,CAAAS,cAAcA,CAAA,CAAG,CACxB;AACA,MAAO,GAAG,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAChE,CAEA,QAAS,CAAAC,SAASA,CAAAC,IAAA,CAAW,IAAR,CAAAC,IAAI,CAAAD,IAAA,CAAJC,IAAI,CACvB,IAAAC,SAAA,CAAkCpB,QAAQ,CAAC,EAAE,CAAC,CAAAqB,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAvCG,SAAS,CAAAF,UAAA,IAAEG,YAAY,CAAAH,UAAA,IAC9B,IAAAI,UAAA,CAAgCzB,QAAQ,CAAC,EAAE,CAAC,CAAA0B,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAArCE,QAAQ,CAAAD,UAAA,IAAEE,WAAW,CAAAF,UAAA,IAE5B,GAAM,CAAAG,MAAM,CAAG,QAAT,CAAAA,MAAMA,CAAA,CAAS,CACnBC,YAAY,CAACC,KAAK,CAAC,CAAC,CACpBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC1B,CAAC,CAED,GAAM,CAAAC,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAIC,CAAC,CAAK,CAC/B,GAAI,CAACA,CAAC,CAACC,GAAG,GAAK,OAAO,EAAID,CAAC,CAACE,IAAI,GAAK,OAAO,GAAKf,SAAS,CAACgB,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CACxE,GAAM,CAAAC,SAAS,CAAG5B,cAAc,CAAC,CAAC,CAClC;AACAR,IAAI,CAACO,OAAO,CAAE,CACZ8B,IAAI,CAAElB,SAAS,CACfmB,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBC,MAAM,CAAE,SAAS,CACjBC,eAAe,CAAEN,SAAW;AAC9B,CAAC,CAAC,CAACO,IAAI,CAAC,UAAM,CACZvB,YAAY,CAAC,EAAE,CAAC,CAAE;AACpB,CAAC,CAAC,CACJ,CACF,CAAC,CAEDvB,SAAS,CAAC,UAAM,CACd,GAAM,CAAA+C,WAAW,CAAG1C,OAAO,CAACK,OAAO,CAAE,SAACsC,QAAQ,CAAK,CACjD,GAAM,CAAAC,IAAI,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAC3B,GAAID,IAAI,CAAE,CACR;AACA,GAAM,CAAAE,YAAY,CAAGC,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CACxCtB,WAAW,CAACwB,YAAY,CAAC,CAC3B,CACF,CAAC,CAAC,CACF,MAAO,WAAM,CACXJ,WAAW,CAAC,CAAC,CACf,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,mBACExC,IAAA,QAAK+C,SAAS,CAAC,gBAAgB,CAAAC,QAAA,cAC7B9C,KAAA,QAAK+C,EAAE,CAAC,IAAI,CAAAD,QAAA,eACVhD,IAAA,QACEkD,GAAG,CAAC,SAAS,CACbC,GAAG,CAAC,EAAE,CACNC,KAAK,CAAE,CACLC,MAAM,CAAE,MAAM,CACdC,KAAK,CAAE,MAAM,CACbC,YAAY,CAAE,MAAM,CACpBC,QAAQ,CAAE,OAAO,CACjBC,GAAG,CAAE,IAAI,CACTC,IAAI,CAAE,IACR,CAAE,CACH,CAAC,cACFxD,KAAA,QAAK+C,EAAE,CAAC,IAAI,CAAAD,QAAA,eACVhD,IAAA,WAAQ+C,SAAS,CAAC,aAAa,CAACY,OAAO,CAAEtC,MAAO,CAAA2B,QAAA,cAC9ChD,IAAA,CAACN,IAAI,EAACkE,EAAE,CAAC,GAAG,CAACR,KAAK,CAAE,CAAES,KAAK,CAAE,OAAO,CAAEC,cAAc,CAAE,MAAO,CAAE,CAAAd,QAAA,CAAC,QAEhE,CAAM,CAAC,CACD,CAAC,cACThD,IAAA,QAAK+C,SAAS,CAAC,UAAU,CAACE,EAAE,CAAC,SAAS,CAAAD,QAAA,CACnC7B,QAAQ,CAAC4C,GAAG,CAAC,SAACC,OAAO,CAAEC,KAAK,qBAC3BjE,IAAA,QAEE+C,SAAS,CAAC,aAAa,CACvBK,KAAK,CAAE,CACLd,eAAe,CAAE0B,OAAO,CAAC1B,eAC3B,CAAE,CAAAU,QAAA,CAEDgB,OAAO,CAAC/B,IAAI,EANRgC,KAOF,CAAC,EACP,CAAC,CACC,CAAC,cACNjE,IAAA,UACE8B,IAAI,CAAC,MAAM,CACXiB,SAAS,CAAC,WAAW,CACrBE,EAAE,CAAC,cAAc,CACjBiB,WAAW,CAAC,mBAAmB,CAC/BC,KAAK,CAAEpD,SAAU,CACjBqD,QAAQ,CAAE,SAAAA,SAACxC,CAAC,QAAK,CAAAZ,YAAY,CAACY,CAAC,CAACyC,MAAM,CAACF,KAAK,CAAC,EAAE;AAAA,CAC/CG,SAAS,CAAE3C,iBAAkB,CAC9B,CAAC,cACF3B,IAAA,WAAQ+C,SAAS,CAAC,YAAY,CAACY,OAAO,CAAEhC,iBAAkB,CAAAqB,QAAA,CAAC,MAE3D,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAEA,cAAe,CAAAvC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}